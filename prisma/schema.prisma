datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Follow {
    id         String   @id @default(cuid())
    followedId String
    followerId String
    followed   User     @relation("followers", fields: [followedId], references: [id], onDelete: Cascade)
    follower   User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
    createdAt  DateTime @default(now())

    @@unique([followedId, followerId])
    @@index([followedId])
    @@index([followerId])
}

model Like {
    id        String   @id @default(cuid())
    productId String
    userId    String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())

    @@unique([productId, userId])
    @@index([productId])
    @@index([userId])
}

enum NotificationAction {
    NEW_ORDER
    EDIT_ORDER
    CANCEL_ORDER
    UPDATE_ORDER
}

model Notification {
    id         String             @id @default(cuid())
    notifierId String
    notifier   User               @relation("notificationActions", fields: [notifierId], references: [id], onDelete: Cascade)
    notifiedId String
    notified   User               @relation("notifications", fields: [notifiedId], references: [id], onDelete: Cascade)
    schemaId   String
    action     NotificationAction
    message    String
    createdAt  DateTime           @default(now())

    @@index([notifierId])
    @@index([notifiedId])
    @@index([schemaId])
}

model OrderItem {
    id            String   @id @default(cuid())
    images        String[]
    name          String
    description   String
    shippingPrice Int
    price         Int
    productId     String
    product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    orderId       String
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([productId, orderId])
    @@index([productId])
    @@index([orderId])
}

enum OrderStatus {
    in_progress
    shipped
    cancelled
}

enum PaymentStatus {
    in_progress
    completed
    failed
    processing_refund
    refunded
}

model Order {
    id            String        @id @default(cuid())
    orderStatus   OrderStatus   @default(in_progress)
    paymentStatus PaymentStatus @default(in_progress)
    paymentId     String        @unique
    shippingTotal Int           @default(0)
    subTotal      Int           @default(0)
    grandTotal    Int           @default(0)
    storeId       String
    store         Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
    userId        String
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    addressId     String
    address       Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
    orderItems    OrderItem[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@index([storeId])
    @@index([userId])
    @@index([addressId])
}

model Address {
    id        String   @id @default(cuid())
    firstName String
    lastName  String
    line1     String
    line2     String
    city      String
    province  String
    zip       String
    country   String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    orders    Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, userId])
    @@index([userId])
}

model BagItem {
    id            String   @id @default(cuid())
    images        String[]
    name          String
    description   String
    shippingPrice Int
    price         Int
    productId     String
    product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    bagId         String
    bag           Bag      @relation(fields: [bagId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([productId, bagId])
    @@index([productId])
    @@index([bagId])
}

model Bag {
    id            String    @id @default(cuid())
    shippingTotal Int       @default(0)
    subTotal      Int       @default(0)
    grandTotal    Int       @default(0)
    storeId       String
    store         Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    bagItems      BagItem[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@unique([storeId, userId])
    @@index([storeId])
    @@index([userId])
}

model Department {
    id         Int        @id @db.SmallInt
    name       String     @unique
    categories Category[]
    products   Product[]

    @@index([name])
}

model Category {
    id           String     @id @default(cuid())
    name         String
    departmentId Int        @db.SmallInt
    department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    products     Product[]

    @@unique([name, departmentId])
    @@index([name])
    @@index([departmentId])
}

model Designer {
    id       Int       @id @db.SmallInt
    name     String
    slug     String
    products Product[]

    @@index([name])
    @@index([slug])
}

model Source {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[]

    @@index([name])
}

model Product {
    id            String      @id @default(cuid())
    images        String[]
    name          String
    description   String
    departmentId  Int         @db.SmallInt
    department    Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    categoryId    String
    category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    subcategory   String
    condition     String
    size          String
    designers     Designer[]
    colours       String[]
    sources       Source[]
    eras          String[]
    styles        String[]
    country       String
    shippingPrice Int
    price         Int
    sold          Boolean     @default(false)
    storeId       String
    store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
    bagItems      BagItem[]
    orderItems    OrderItem[]
    likesCount    Int         @default(0)
    likes         Like[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@unique([id, storeId])
    @@index([storeId])
    @@index([departmentId])
    @@index([categoryId])
}

enum SetupStatus {
    not_started
    in_progress
    complete
}

model Store {
    id                String      @id @default(cuid())
    stripeAccountId   String      @unique
    stripeSetupStatus SetupStatus @default(not_started)
    firstName         String
    lastName          String
    line1             String
    line2             String
    city              String
    province          String
    zip               String
    country           String
    userId            String      @unique
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    productsCount     Int         @default(0)
    products          Product[]
    bags              Bag[]
    orders            Order[]
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt

    @@unique([id, userId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String         @id @default(cuid())
    name                String?
    bio                 String?
    username            String         @unique @db.VarChar(255)
    email               String         @unique @db.VarChar(320)
    verified            Boolean        @default(false)
    hasStore            Boolean        @default(false)
    canSell             Boolean        @default(false)
    emailVerified       DateTime?
    image               String?
    password            String?
    accounts            Account[]
    sessions            Session[]
    store               Store?
    bags                Bag[]
    orders              Order[]
    addresses           Address[]
    notificationActions Notification[] @relation("notificationActions")
    notifications       Notification[] @relation("notifications")
    likes               Like[]
    followersCount      Int            @default(0)
    followingCount      Int            @default(0)
    followers           Follow[]       @relation("followers")
    following           Follow[]       @relation("following")
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt

    @@unique([id, username])
    @@unique([id, email])
    @@unique([username, email])
    @@index([email])
    @@index([username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
