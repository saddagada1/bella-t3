datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

enum Status {
    not_started
    in_progress
    complete
}

model Store {
    id                String   @id @default(cuid())
    stripeAccountId   String   @unique
    stripeSetupStatus Status   @default(not_started)
    firstName         String
    lastName          String
    line1             String
    line2             String
    city              String
    province          String
    zip               String
    country           String
    userId            String   @unique
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([id, userId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    bio           String?
    username      String    @unique @db.VarChar(255)
    email         String    @unique @db.VarChar(320)
    verified      Boolean   @default(false)
    hasStore      Boolean   @default(false)
    canSell       Boolean   @default(false)
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    store         Store?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@unique([id, username])
    @@unique([id, email])
    @@unique([username, email])
    @@index([email])
    @@index([username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
